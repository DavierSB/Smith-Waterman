float gap_weight_lineal(int k)
{
    return -2;
}
float gap_weight_affine(int k)
{
    int create_gap = -1;
    int expand_gap = -0.3;
    return create_gap + expand_gap*k;
}

void Test_Case()
{
    /*string s1 = "TACGGGCCCGCTAC";
    string s2 = "TAGCCCTATCGGTCA";
    string aux = "ACGT";*/
    string s1 = "AATCG";
    string s2 = "AACG";
    string aux = "ATGC";
    map<pair<char, char>, float> dict;
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            dict[make_pair(aux[i], aux[j])] = (i == j)?1:-1;
    SWCalculator MySWCalculator = SWCalculator(dict, gap_weight_lineal);
    MySWCalculator.Alinear(s1, s2);
}